# -*- coding: utf-8 -*-
"""Python_task_1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TYTlHbh65foXVpCcnqsrqfCuiPvktf7u
"""

import numpy as np
import pandas as pd

df=pd.read_csv('/content/dataset-1.csv')
df

"""Question 1: Car Matrix Generation
Under the function named generate_car_matrix write a logic that takes the dataset-1.csv as a DataFrame. Return a new DataFrame that follows the following rules:

values from id_2 as columns

values from id_1 as index

dataframe should have values from car column

diagonal values should be 0.

"""

def generate_car_matrix(path):
  df=pd.read_csv(path)
  car_matrix = df.pivot(index='id_1', columns='id_2', values='car')
  car_array=car_matrix.to_numpy()
  np.fill_diagonal(car_array,0)
  return car_matrix

path='dataset-1.csv'

result=generate_car_matrix(path)

print(result)

"""Question 2: Car Type Count Calculation
Create a Python function named get_type_count that takes the dataset-1.csv as a DataFrame. Add a new categorical column car_type based on values of the column car:

low for values less than or equal to 15,

medium for values greater than 15 and less than or equal to 25,

high for values greater than 25.

Calculate the count of occurrences for each car_type category and return the result as a dictionary. Sort the dictionary alphabetically based on keys.
"""

def get_type_count(path):
  df=pd.read_csv(path)
  conditions = [
        (df['car'] <= 15),
        ((df['car'] > 15) & (df['car'] <= 25)),
        (df['car'] > 25)
    ]

  choices = ['low', 'medium', 'high']
  df['car_type'] = np.select(conditions, choices, default='unknown')
  type_count = df['car_type'].value_counts().to_dict()
  type_count = dict(sorted(type_count.items()))
  return type_count

path='dataset-1.csv'
result1=get_type_count(path)
print(result1)

"""Question 3: Bus Count Index Retrieval
Create a Python function named get_bus_indexes that takes the dataset-1.csv as a DataFrame. The function should identify and return the indices as a list (sorted in ascending order) where the bus values are greater than twice the mean value of the bus column in the DataFrame.
"""

def get_bus_indexes(path):
  df=pd.read_csv(path)
  bus_mean=df['bus'].mean()
  bus_index=df[df['bus']> 2*bus_mean].index.to_list()
  bus_index.sort()
  return bus_index

path='dataset-1.csv'
result2=get_bus_indexes(path)
print(result2)

"""Question 4: Route Filtering
Create a python function filter_routes that takes the dataset-1.csv as a DataFrame.

The function should return the sorted list of values of column route for which the average of values of truck column is greater than 7
"""

df.head()

def filter_routes(path):
  df=pd.read_csv(path)
  avg_trucks=df.groupby('route')['truck'].mean()
  filter=avg_trucks[avg_trucks > 7].index.tolist()
  filter.sort()
  return filter


path='dataset-1.csv'
result3=filter_routes(path)
print(result3)

"""Question 5: Matrix Value Modification
Create a Python function named multiply_matrix that takes the resulting DataFrame from Question 1, as input and modifies each value according to the following logic:

If a value in the DataFrame is greater than 20, multiply those values by 0.75,

If a value is 20 or less, multiply those values by 1.25.
The function should return the modified DataFrame which has values rounded to 1 decimal place.
"""

def multiply_matrix(path):
  copy=path.copy()
  new_matrix=copy.applymap(lambda x:x * 0.75 if x>20 else x*1.25)
  changed_matrix=new_matrix.round(1)
  return changed_matrix


path=result
result4=multiply_matrix(path)
print(result4)

